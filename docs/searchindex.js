Search.setIndex({"alltitles": {"Adding custom operators": [[0, "Adding-custom-operators"]], "Advanced Usage Example": [[0, "Advanced-Usage-Example"]], "Apache License": [[8, "apache-license"]], "Bagging": [[0, "Bagging"]], "Basic Usage Example": [[1, "Basic-Usage-Example"]], "Binarizing the data": [[1, "Binarizing-the-data"]], "BoolXAI CHANGELOG": [[4, "boolxai-changelog"]], "BoolXAI Public API": [[3, "boolxai-public-api"]], "BoolXAI: Explainable AI using expressive Boolean formulas": [[7, "boolxai-explainable-ai-using-expressive-boolean-formulas"], [10, "boolxai-explainable-ai-using-expressive-boolean-formulas"]], "Boosting": [[2, "Boosting"]], "Building the documentation": [[5, "building-the-documentation"]], "Changing the allowed operators": [[0, "Changing-the-allowed-operators"]], "Checking the test coverage": [[5, "checking-the-test-coverage"]], "Citation": [[7, "citation"], [10, "citation"]], "Cross validation": [[0, "Cross-validation"]], "Indices and tables": [[7, "indices-and-tables"]], "Input data": [[0, "Input-data"], [1, "Input-data"], [2, "Input-data"]], "Installation": [[7, "installation"], [10, "installation"]], "June, 3, 2024 1.0.0": [[4, "june-3-2024-1-0-0"]], "License": [[7, "license"], [10, "license"]], "Making sense of the rules": [[1, "Making-sense-of-the-rules"]], "Making your own changes to BoolXAI": [[5, "making-your-own-changes-to-boolxai"]], "Multiclass classification": [[2, "Multiclass-classification"]], "Multilabel classification": [[2, "Multilabel-classification"]], "Notices": [[9, "notices"]], "Number of starts": [[0, "Number-of-starts"]], "Optimizing part of a rule": [[0, "Optimizing-part-of-a-rule"]], "Parallelization": [[0, "Parallelization"]], "Pareto frontier": [[0, "Pareto-frontier"]], "Quick Start": [[7, "quick-start"], [10, "quick-start"]], "Requirements": [[7, "requirements"], [10, "requirements"]], "Rule class diagram": [[0, "Rule-class-diagram"]], "Running the tests": [[5, "running-the-tests"]], "September 15, 2023 0.1.0": [[4, "september-15-2023-0-1-0"]], "Support": [[7, "support"], [10, "support"]], "Contributing": [[5, "contributing-section"]], "Training a rule classifier": [[1, "Training-a-rule-classifier"]], "Upstream Usage Example": [[2, "Upstream-Usage-Example"]], "Usage Examples": [[6, "usage-examples"], [7, "usage-examples"], [10, "usage-examples"]], "boolxai": [[3, "module-boolxai.boolxai"]], "literal": [[3, "module-boolxai.rules.literal"]], "operators": [[3, "module-boolxai.rules.operators"]], "rules": [[3, "rules"]], "trivials": [[3, "module-boolxai.rules.trivials"]], "util": [[3, "module-boolxai.util"]]}, "docnames": ["_examples/advanced_usage", "_examples/basic_usage", "_examples/upstream_usage", "api", "changelog", "contributing", "examples", "index", "license", "notices", "readme"], "envversion": {"nbsphinx": 4, "sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["_examples/advanced_usage.ipynb", "_examples/basic_usage.ipynb", "_examples/upstream_usage.ipynb", "api.rst", "changelog.rst", "contributing.rst", "examples.rst", "index.rst", "license.rst", "notices.rst", "readme.rst"], "indexentries": {"__init__() (boolxai.boolxai.boolxai.baselineclassifier method)": [[3, "boolxai.boolxai.BoolXAI.BaselineClassifier.__init__", false]], "__init__() (boolxai.boolxai.boolxai.ruleclassifier method)": [[3, "boolxai.boolxai.BoolXAI.RuleClassifier.__init__", false]], "__init__() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.__init__", false]], "__init__() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.__init__", false]], "__init__() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.__init__", false]], "__init__() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.__init__", false]], "__init__() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.__init__", false]], "__init__() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.__init__", false]], "__init__() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.__init__", false]], "__init__() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.__init__", false]], "__init__() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.__init__", false]], "__init__() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.__init__", false]], "__init__() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.__init__", false]], "__init__() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.__init__", false]], "boolxai (class in boolxai.boolxai)": [[3, "boolxai.boolxai.BoolXAI", false]], "boolxai.baselineclassifier (class in boolxai.boolxai)": [[3, "boolxai.boolxai.BoolXAI.BaselineClassifier", false]], "boolxai.boolxai": [[3, "module-boolxai.boolxai", false]], "boolxai.ruleclassifier (class in boolxai.boolxai)": [[3, "boolxai.boolxai.BoolXAI.RuleClassifier", false]], "boolxai.rules.literal": [[3, "module-boolxai.rules.literal", false]], "boolxai.rules.operators": [[3, "module-boolxai.rules.operators", false]], "boolxai.rules.trivials": [[3, "module-boolxai.rules.trivials", false]], "boolxai.util": [[3, "module-boolxai.util", false]], "check_binary() (in module boolxai.util)": [[3, "boolxai.util.check_binary", false]], "complexity() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.complexity", false]], "complexity() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.complexity", false]], "complexity() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.complexity", false]], "complexity() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.complexity", false]], "complexity() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.complexity", false]], "complexity() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.complexity", false]], "complexity() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.complexity", false]], "complexity() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.complexity", false]], "complexity() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.complexity", false]], "complexity() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.complexity", false]], "complexity() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.complexity", false]], "complexity() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.complexity", false]], "decision_function() (boolxai.boolxai.boolxai.ruleclassifier method)": [[3, "boolxai.boolxai.BoolXAI.RuleClassifier.decision_function", false]], "depth() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.depth", false]], "depth() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.depth", false]], "depth() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.depth", false]], "depth() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.depth", false]], "depth() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.depth", false]], "depth() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.depth", false]], "depth() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.depth", false]], "depth() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.depth", false]], "depth() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.depth", false]], "depth() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.depth", false]], "depth() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.depth", false]], "depth() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.depth", false]], "evaluate() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.evaluate", false]], "evaluate() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.evaluate", false]], "evaluate() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.evaluate", false]], "evaluate() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.evaluate", false]], "evaluate() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.evaluate", false]], "evaluate() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.evaluate", false]], "evaluate() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.evaluate", false]], "evaluate() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.evaluate", false]], "evaluate() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.evaluate", false]], "evaluate() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.evaluate", false]], "evaluate() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.evaluate", false]], "evaluate() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.evaluate", false]], "fit() (boolxai.boolxai.boolxai.baselineclassifier method)": [[3, "boolxai.boolxai.BoolXAI.BaselineClassifier.fit", false]], "fit() (boolxai.boolxai.boolxai.ruleclassifier method)": [[3, "boolxai.boolxai.BoolXAI.RuleClassifier.fit", false]], "flatten() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.flatten", false]], "flatten() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.flatten", false]], "flatten() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.flatten", false]], "flatten() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.flatten", false]], "flatten() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.flatten", false]], "flatten() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.flatten", false]], "flatten() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.flatten", false]], "flatten() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.flatten", false]], "flatten() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.flatten", false]], "flatten() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.flatten", false]], "flatten() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.flatten", false]], "flatten() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.flatten", false]], "get_params() (boolxai.boolxai.boolxai.baselineclassifier method)": [[3, "boolxai.boolxai.BoolXAI.BaselineClassifier.get_params", false]], "get_params() (boolxai.boolxai.boolxai.ruleclassifier method)": [[3, "boolxai.boolxai.BoolXAI.RuleClassifier.get_params", false]], "literal (class in boolxai.rules.literal)": [[3, "boolxai.rules.literal.Literal", false]], "module": [[3, "module-boolxai.boolxai", false], [3, "module-boolxai.rules.literal", false], [3, "module-boolxai.rules.operators", false], [3, "module-boolxai.rules.trivials", false], [3, "module-boolxai.util", false]], "one (class in boolxai.rules.trivials)": [[3, "boolxai.rules.trivials.One", false]], "operator (class in boolxai.rules.operators)": [[3, "boolxai.rules.operators.Operator", false]], "operator.and (class in boolxai.rules.operators)": [[3, "boolxai.rules.operators.Operator.And", false]], "operator.atleast (class in boolxai.rules.operators)": [[3, "boolxai.rules.operators.Operator.AtLeast", false]], "operator.atmost (class in boolxai.rules.operators)": [[3, "boolxai.rules.operators.Operator.AtMost", false]], "operator.choose (class in boolxai.rules.operators)": [[3, "boolxai.rules.operators.Operator.Choose", false]], "operator.or (class in boolxai.rules.operators)": [[3, "boolxai.rules.operators.Operator.Or", false]], "parametrizedoperator (class in boolxai.rules.operators)": [[3, "boolxai.rules.operators.ParametrizedOperator", false]], "plot() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.plot", false]], "plot() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.plot", false]], "plot() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.plot", false]], "plot() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.plot", false]], "plot() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.plot", false]], "plot() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.plot", false]], "plot() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.plot", false]], "plot() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.plot", false]], "plot() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.plot", false]], "plot() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.plot", false]], "plot() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.plot", false]], "plot() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.plot", false]], "predict() (boolxai.boolxai.boolxai.baselineclassifier method)": [[3, "boolxai.boolxai.BoolXAI.BaselineClassifier.predict", false]], "predict() (boolxai.boolxai.boolxai.ruleclassifier method)": [[3, "boolxai.boolxai.BoolXAI.RuleClassifier.predict", false]], "score() (boolxai.boolxai.boolxai.baselineclassifier method)": [[3, "boolxai.boolxai.BoolXAI.BaselineClassifier.score", false]], "score() (boolxai.boolxai.boolxai.ruleclassifier method)": [[3, "boolxai.boolxai.BoolXAI.RuleClassifier.score", false]], "set_params() (boolxai.boolxai.boolxai.baselineclassifier method)": [[3, "boolxai.boolxai.BoolXAI.BaselineClassifier.set_params", false]], "set_params() (boolxai.boolxai.boolxai.ruleclassifier method)": [[3, "boolxai.boolxai.BoolXAI.RuleClassifier.set_params", false]], "to_dict() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.to_dict", false]], "to_dict() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.to_dict", false]], "to_dict() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.to_dict", false]], "to_dict() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.to_dict", false]], "to_dict() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.to_dict", false]], "to_dict() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.to_dict", false]], "to_dict() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.to_dict", false]], "to_dict() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.to_dict", false]], "to_dict() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.to_dict", false]], "to_dict() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.to_dict", false]], "to_dict() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.to_dict", false]], "to_dict() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.to_dict", false]], "to_graph() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.to_graph", false]], "to_graph() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.to_graph", false]], "to_graph() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.to_graph", false]], "to_graph() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.to_graph", false]], "to_graph() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.to_graph", false]], "to_graph() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.to_graph", false]], "to_graph() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.to_graph", false]], "to_graph() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.to_graph", false]], "to_graph() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.to_graph", false]], "to_graph() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.to_graph", false]], "to_graph() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.to_graph", false]], "to_graph() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.to_graph", false]], "to_str() (boolxai.rules.literal.literal method)": [[3, "boolxai.rules.literal.Literal.to_str", false]], "to_str() (boolxai.rules.operators.operator.and method)": [[3, "boolxai.rules.operators.Operator.And.to_str", false]], "to_str() (boolxai.rules.operators.operator.atleast method)": [[3, "boolxai.rules.operators.Operator.AtLeast.to_str", false]], "to_str() (boolxai.rules.operators.operator.atmost method)": [[3, "boolxai.rules.operators.Operator.AtMost.to_str", false]], "to_str() (boolxai.rules.operators.operator.choose method)": [[3, "boolxai.rules.operators.Operator.Choose.to_str", false]], "to_str() (boolxai.rules.operators.operator.or method)": [[3, "boolxai.rules.operators.Operator.Or.to_str", false]], "to_str() (boolxai.rules.operators.parametrizedoperator method)": [[3, "boolxai.rules.operators.ParametrizedOperator.to_str", false]], "to_str() (boolxai.rules.operators.unparametrizedoperator method)": [[3, "boolxai.rules.operators.UnparametrizedOperator.to_str", false]], "to_str() (boolxai.rules.trivials.one method)": [[3, "boolxai.rules.trivials.One.to_str", false]], "to_str() (boolxai.rules.trivials.trivial method)": [[3, "boolxai.rules.trivials.Trivial.to_str", false]], "to_str() (boolxai.rules.trivials.wildcard method)": [[3, "boolxai.rules.trivials.Wildcard.to_str", false]], "to_str() (boolxai.rules.trivials.zero method)": [[3, "boolxai.rules.trivials.Zero.to_str", false]], "trivial (class in boolxai.rules.trivials)": [[3, "boolxai.rules.trivials.Trivial", false]], "unparametrizedoperator (class in boolxai.rules.operators)": [[3, "boolxai.rules.operators.UnparametrizedOperator", false]], "wildcard (class in boolxai.rules.trivials)": [[3, "boolxai.rules.trivials.Wildcard", false]], "zero (class in boolxai.rules.trivials)": [[3, "boolxai.rules.trivials.Zero", false]]}, "objects": {"boolxai": [[3, 0, 0, "-", "boolxai"], [3, 0, 0, "-", "util"]], "boolxai.boolxai": [[3, 1, 1, "", "BoolXAI"]], "boolxai.boolxai.BoolXAI": [[3, 1, 1, "", "BaselineClassifier"], [3, 1, 1, "", "RuleClassifier"]], "boolxai.boolxai.BoolXAI.BaselineClassifier": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_params"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "score"], [3, 2, 1, "", "set_params"]], "boolxai.boolxai.BoolXAI.RuleClassifier": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "decision_function"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_params"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "score"], [3, 2, 1, "", "set_params"]], "boolxai.rules": [[3, 0, 0, "-", "literal"], [3, 0, 0, "-", "operators"], [3, 0, 0, "-", "trivials"]], "boolxai.rules.literal": [[3, 1, 1, "", "Literal"]], "boolxai.rules.literal.Literal": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.operators": [[3, 1, 1, "", "Operator"], [3, 1, 1, "", "ParametrizedOperator"], [3, 1, 1, "", "UnparametrizedOperator"]], "boolxai.rules.operators.Operator": [[3, 1, 1, "", "And"], [3, 1, 1, "", "AtLeast"], [3, 1, 1, "", "AtMost"], [3, 1, 1, "", "Choose"], [3, 1, 1, "", "Or"]], "boolxai.rules.operators.Operator.And": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.operators.Operator.AtLeast": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.operators.Operator.AtMost": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.operators.Operator.Choose": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.operators.Operator.Or": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.operators.ParametrizedOperator": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.operators.UnparametrizedOperator": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.trivials": [[3, 1, 1, "", "One"], [3, 1, 1, "", "Trivial"], [3, 1, 1, "", "Wildcard"], [3, 1, 1, "", "Zero"]], "boolxai.rules.trivials.One": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.trivials.Trivial": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.trivials.Wildcard": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.rules.trivials.Zero": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "complexity"], [3, 2, 1, "", "depth"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "flatten"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "to_dict"], [3, 2, 1, "", "to_graph"], [3, 2, 1, "", "to_str"]], "boolxai.util": [[3, 3, 1, "", "check_binary"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "terms": {"": [0, 1, 2, 3, 5, 7, 8, 10], "0": [0, 1, 2, 3, 7, 8, 10], "00": [1, 2], "000": 0, "000001": 3, "0001": 3, "0049": 2, "0055": 2, "0074": 2, "0087": 2, "0105": 2, "012": 1, "0189": 2, "02": 0, "0245": 2, "02sec": 0, "03": 0, "034": 2, "0388": 2, "04": 0, "0546": 2, "056": 1, "05667": 1, "058": 1, "05883": 1, "05999": 1, "06": 3, "063": 2, "0658": 1, "068": 1, "0697": 1, "07017": 1, "0719": 2, "0735": 1, "07678": 1, "0769": 1, "07864": 1, "07871": 1, "08": [0, 1], "0832": 1, "08474": 1, "0869": 1, "0871": 2, "08758": 1, "089": 1, "08902": 1, "0899": 2, "0959": 1, "09744": 1, "1": [0, 1, 2, 3, 7, 8, 10], "10": [0, 1, 2, 3, 7, 10], "100": [0, 2, 7, 10], "1001": 1, "10030": 1, "101": 0, "10430": 1, "10520": 1, "1063": 1, "108": 0, "109": 0, "10960": 1, "11": [0, 1, 2], "11840": 1, "11890": 1, "119": 2, "12": [0, 1, 2], "120": 0, "1203": 1, "122": 1, "1238": 1, "125": 0, "126": 0, "1269": 1, "12790": 1, "129": 0, "1297": 1, "13": [0, 1, 2], "130": [0, 1], "132": 1, "1326": 1, "13280": 1, "135": 1, "136": 0, "1374": 1, "138": 0, "1394": 2, "14": [0, 1, 2], "142": 0, "14250": 1, "1444": 1, "14710": 1, "15": [0, 1, 2, 7], "150": [0, 2], "152": 1, "156": 2, "1575": 1, "158": 1, "15990": 1, "16": [0, 1, 2], "160": 0, "1622": 1, "1625": 1, "1673": 1, "168": 0, "17": [0, 1, 2], "170": 0, "1709": 1, "171": 0, "1713": 2, "1726": 2, "17300": 1, "1760": [7, 10], "178": 0, "179": 0, "1795": [7, 10], "18": [0, 1, 2], "1809": 1, "1812": 1, "184": 1, "186": 2, "1860": 1, "1866": 1, "19": [0, 1, 2], "190": 0, "1908": 2, "192": 0, "195": 0, "1956": 1, "197": 0, "19722458": 2, "1974": 1, "1980": 1, "199": 2, "1e": 3, "2": [0, 1, 2, 3, 7, 8, 10], "20": [0, 1, 2], "200": [0, 2], "2000": 3, "2004": 8, "201": 0, "2019": 1, "202": 0, "2023": [7, 8, 9, 10], "2024": 7, "204": 2, "205": 0, "2050": 1, "206": 0, "2069": 1, "207": 0, "209": 1, "2098": 1, "21": [0, 1, 2], "212": 0, "2131": 2, "217": 0, "219": 0, "22": [0, 1, 2], "220": 0, "221": 0, "2212": 2, "222": 0, "225": 0, "226": 0, "23": [0, 1, 2, 7, 10], "230": 0, "231": 0, "232": 0, "235": 0, "236": 1, "2364": 1, "237": 1, "238": 1, "239": 0, "24": [0, 1, 2], "2414": 1, "2416": 1, "2419": 1, "2430": 1, "244": 0, "246": 0, "249": 0, "25": [1, 2], "250": 0, "2504": [7, 10], "251": 0, "252": 0, "256": 0, "257": 0, "2575": 1, "259": 1, "2597": 1, "26": [0, 1, 2], "260": 0, "261": 0, "262": 0, "263": 0, "265": 0, "2654": 1, "2656": 2, "267": 0, "27": 2, "270": 0, "271": 0, "272": 0, "274": 0, "2750": 1, "27760": 1, "28": [0, 2], "28390": 1, "29": 1, "291": 0, "296": 0, "299": 0, "2d": 0, "2f": [0, 1, 2, 7, 10], "3": [0, 1, 2, 3, 7, 9, 10], "30": [0, 1], "300": 1, "3001": 1, "31": 2, "32": 0, "328": 2, "33": [0, 1], "3390": [7, 10], "34": 1, "35": [0, 2], "36": 0, "3600": 5, "3613": 1, "365": 2, "366": 1, "37": [0, 1], "38": [0, 1, 2], "386": 1, "39": 1, "4": [0, 1, 2, 7, 10], "4000": 1, "40632095": 2, "41": [0, 1], "41sec": 0, "42": [0, 1, 7, 10], "4245": 1, "43": [0, 1, 2], "4478": 1, "448": 2, "4504": 1, "4601": 1, "47293046": 2, "489": 2, "4990": [7, 10], "5": [0, 1, 2, 7, 10], "50": [0, 1, 8], "500": 3, "5095760576": 1, "5095760816": 1, "5095760864": 1, "5095761728": 1, "5095761872": 1, "5095762064": 1, "53": 1, "5335": 2, "54": 1, "565": 2, "567": 1, "569": 1, "57": 1, "58": 1, "6": [0, 1, 2, 3, 7, 10], "60": [0, 1], "61": 0, "61359288": 2, "614": 2, "62": 0, "64": 0, "64179982": 2, "648": 2, "66": 0, "6638": 1, "6656": 1, "668": 2, "67": [0, 1], "68": 0, "682": 1, "6869": 1, "68sec": 0, "69": [1, 2], "7": [0, 1, 2], "70": 0, "71": 0, "7119": 1, "72": 0, "726": 1, "73": 0, "74": [0, 2], "75": 0, "76": 0, "77": [0, 1, 2], "78": 0, "781": 1, "79": 0, "8": [0, 1, 2, 7, 10], "80": [0, 1, 2], "81": 0, "82": 0, "83": 0, "834": 0, "83sec": 0, "84": [0, 2], "85": 0, "86": [0, 7, 10], "8663": 1, "87": [0, 1, 2], "88": [0, 2], "89": 0, "9": [0, 1, 2, 8], "90": [0, 1], "91": [0, 1, 2], "92": 0, "926": 1, "93": 0, "93sec": 0, "94": 0, "96": [1, 2], "98": 1, "99": 1, "A": [3, 7, 8, 10], "AND": 8, "AS": 8, "And": [0, 1, 2, 3, 7, 10], "As": [0, 1, 2], "But": 0, "FOR": 8, "For": [0, 1, 2, 3, 7, 8, 10], "If": [3, 5, 7, 8, 10], "In": [0, 1, 2, 3, 7, 8, 10], "It": [0, 1, 5, 7, 10], "Not": 8, "OF": 8, "OR": 8, "One": 3, "Or": [0, 2, 3, 7, 10], "Such": [7, 10], "That": 0, "The": [0, 1, 2, 3, 7, 8, 9, 10], "Then": [0, 5], "These": 3, "To": [0, 2, 3, 5, 8], "With": [0, 2], "__": 3, "__init__": 3, "_evalu": 0, "abil": 0, "abov": [1, 5, 8], "abstract": 0, "accept": [5, 8], "access": [0, 1], "accord": [7, 10], "accuraci": [0, 1], "accuracy_scor": 2, "achiev": 1, "across": 3, "act": 8, "actual": [0, 1], "ad": 6, "adaboostclassifi": 2, "add": [0, 5, 8], "addendum": 8, "addit": [0, 1, 2, 3, 7, 8, 10], "address": 1, "adjust": 0, "advanc": [2, 6, 7, 10], "advis": [0, 8], "affect": 5, "after": [0, 3], "again": [0, 1], "against": 8, "aggreg": 0, "agraph": 3, "agre": 8, "agreement": 8, "algorithm": 2, "all": [0, 1, 2, 3, 5, 8], "all_num_job": 0, "all_operator_class": 3, "alleg": 8, "allequ": 0, "alloperatortyp": 3, "allow": [3, 6, 7, 10], "alon": 8, "along": 8, "alongsid": 8, "alreadi": 0, "also": [0, 1, 2, 5, 7, 8, 10], "altern": [3, 7, 10], "alwai": [0, 3], "amazon": [7, 8, 9, 10], "amount": 0, "an": [0, 2, 3, 5, 7, 8, 9, 10], "ani": [1, 3, 5, 7, 8, 10], "anneal": 3, "annot": 8, "anoth": 2, "anticip": 5, "apach": [7, 10], "api": 7, "appear": [0, 3, 8], "append": 0, "appendix": 8, "appli": [0, 1, 2, 7, 8, 10], "applic": [0, 8], "approach": [7, 10], "appropri": 8, "ar": [0, 1, 2, 3, 5, 7, 8, 10], "archiv": [7, 8, 10], "area": [1, 2], "argument": [0, 1], "aris": 8, "arrai": [0, 2, 3], "articl": [7, 10], "artifici": [7, 10], "arxiv": [7, 10], "as_fram": [0, 1, 2], "assert": 8, "associ": 8, "assum": 8, "atleast": [3, 7, 10], "atleast1": [0, 2], "atleast2": 0, "atmost": [3, 7, 10], "atmost1": [0, 2, 3], "attach": 8, "attribut": [0, 1, 3, 8], "author": [7, 8, 10], "authorship": 8, "avail": [5, 7, 8, 10], "avoid": 0, "axi": [0, 2], "b": [0, 2, 3, 8], "bag": [3, 6, 7, 10], "balanc": [0, 1], "balanced_accuracy_scor": [0, 1, 2, 3, 7, 10], "base": [0, 3, 7, 8, 10], "base_rul": [0, 3, 7, 10], "baselin": [2, 3], "baselineclassifi": 3, "basi": [5, 8], "basic": [0, 2, 6, 7, 10], "basicconfig": 3, "been": [5, 7, 8, 10], "befor": [0, 2, 5], "begin": [3, 5], "behalf": 8, "being": [3, 7, 10], "below": [0, 1, 2, 8], "benefici": 8, "best": [0, 1, 2, 3, 7, 10], "best_rul": [7, 10], "best_rule_": [0, 1, 2, 3, 7, 10], "best_scor": [7, 10], "best_score_": [0, 1, 3, 7, 10], "better": 1, "big": 0, "bin": 2, "binar": [0, 2, 6, 7, 10], "binari": [0, 2, 3, 7, 10], "bind": 8, "blogpost": [7, 10], "boilerpl": 8, "bool": 3, "boolean": 3, "boolxai": [0, 1, 2, 9], "boolxai2023": [7, 10], "boolxai_test": 5, "boolxaikbinsdiscret": [0, 1, 2], "boost": [0, 6, 7, 10], "boosted_rule_classifi": 2, "boostrap": 0, "borujeni": [7, 10], "both": 1, "bound": 0, "bracket": 8, "breast": 1, "browser": 5, "brubak": [7, 10], "bsd": 9, "bug": [7, 10], "c": [2, 3, 8], "calcul": [2, 3], "call": [1, 3], "callabl": 3, "callback": 3, "can": [0, 1, 2, 3, 5, 7, 10], "cancer": 1, "cannot": [3, 7, 8, 10], "carri": 8, "case": [0, 2, 3], "caus": 8, "cd": 5, "cell": 0, "center": [7, 10], "chain": 3, "chang": [3, 6, 7, 8], "changelog": 7, "charact": 8, "charg": 8, "check": [0, 1, 3], "check_binari": 3, "child": 3, "children": [1, 3], "choic": [7, 10], "choos": [0, 2, 3, 7, 8, 10], "choose1": [0, 2], "chosen": [0, 2], "ci": 5, "cite": [7, 10], "claim": 8, "class": [2, 3, 6, 7, 8, 10], "classif": [6, 7, 10], "classifi": [0, 2, 3, 6, 7, 10], "claus": 9, "clear": 0, "clearer": 0, "clearli": 2, "clock": 0, "clone": [7, 10], "cm": 2, "code": [3, 5, 8], "column": [1, 2], "column_stack": 0, "com": [5, 7, 10], "combin": [0, 2, 8], "come": 2, "comment": [0, 2, 8], "commerci": 8, "common": 8, "commonli": 0, "commun": 8, "compact": [1, 2], "compar": [2, 7, 10], "comparison": 0, "compil": [5, 8], "complex": [0, 1, 2, 3, 7, 10], "compli": 8, "complianc": 8, "compon": 3, "comput": [0, 3, 7, 8, 10], "concav": [1, 2], "concret": 0, "condit": 8, "configur": 8, "consequenti": 8, "consist": [0, 2, 8], "conspicu": 8, "constant": 3, "constitut": 8, "constrain": 3, "constru": 8, "construct": 0, "consum": 5, "contact": [5, 7, 10], "contain": [0, 1, 3, 8], "content": 8, "continu": 1, "contract": 8, "contribut": [5, 8], "contributor": 8, "contributori": 8, "control": [0, 3, 8], "conveni": 1, "convers": 8, "convert": 2, "copi": [2, 8], "copyright": [8, 9], "core": 0, "correl": 0, "correspond": 3, "could": 2, "counterclaim": 8, "cours": 0, "cover": [0, 2], "cpl": 9, "cpu": [0, 3], "creat": [2, 5, 7, 10], "cross": [2, 3, 6, 7, 8, 10], "cross_valid": 0, "current": [3, 5], "curv": 0, "custom": [6, 7, 10], "customari": 8, "cv": 0, "d": [0, 2, 8], "damag": 8, "data": [3, 6, 7, 10], "datafram": [1, 2], "dataset": [0, 1, 2, 3], "date": 8, "debug": 3, "decision_funct": 3, "deep": 3, "def": 0, "default": [0, 1, 3], "default_rng": [7, 10], "defend": 8, "defin": [0, 1, 2, 3, 7, 8, 10], "definit": [0, 3, 8], "deliber": 8, "dens": [0, 1, 2], "depend": [0, 7, 9, 10], "depth": [1, 3, 7, 10], "deriv": 8, "describ": 8, "descript": 8, "design": 8, "determin": [0, 8], "dev": 5, "develop": [4, 7, 9, 10], "diagnost": 1, "diagram": 6, "dict": 3, "dictionari": [1, 3], "differ": [0, 2, 8], "difficult": 2, "digraph": [1, 3, 7, 10], "dimens": 1, "dimension": 3, "direct": [3, 8], "directli": 0, "disclaim": 8, "discuss": 8, "displai": 8, "distribut": 8, "divid": 3, "do": [0, 5, 8], "doc": 5, "docsrc": 5, "docstr": 5, "document": [7, 8, 10], "doe": [1, 2, 8], "doi": [7, 10], "don": 8, "done": [0, 1], "dure": 3, "e": [2, 3, 7, 10], "each": [0, 1, 2, 3, 8], "earlier": 0, "easier": [0, 8], "easili": 1, "edg": [1, 7, 10], "edge_attr": 3, "editori": 8, "effici": [7, 10], "effort": 3, "either": 8, "elabor": 8, "elapsed_tim": 0, "electron": 8, "element": 3, "els": 5, "elton": [7, 10], "enclos": 8, "encod": [0, 1, 2], "end": [3, 5, 8], "engag": 9, "ensembl": [0, 2, 3], "ensur": 5, "entiti": 8, "environ": [7, 10], "equal": [0, 3], "error": [2, 3], "error_scor": 0, "estim": [0, 3], "estimator_weights_": 2, "estimators_": 2, "evalu": [0, 1, 2, 3], "even": [0, 8], "event": 8, "exactli": 3, "exampl": [3, 8, 9], "excel": [7, 10], "except": 8, "exclud": 8, "exclus": 8, "execut": [0, 2, 3, 5, 8], "exercis": 8, "exhaust": 3, "exist": 1, "exit": 3, "expect": [0, 1, 3, 5], "experi": 0, "explicitli": 8, "exploit": 3, "explor": 3, "express": [0, 8], "extens": 3, "extern": 3, "extract": [7, 10], "f": [0, 1, 2, 7, 10], "f1": 0, "f2": 0, "fail": 5, "failur": 8, "fals": [0, 3], "far": 2, "fcat": [7, 10], "feasibl": [7, 10], "featur": [0, 1, 2, 3, 7, 10], "feature_nam": [1, 3], "fee": 8, "feed": 0, "few": 0, "fidel": [5, 7, 10], "field": 8, "fifti": 8, "figsiz": 0, "figur": [0, 3], "file": [3, 5, 8], "filenam": 3, "final": [2, 5], "find": [0, 3], "first": [0, 1, 2, 5], "fit": [0, 1, 2, 3, 7, 8, 10], "fit_tim": 0, "fit_transform": [0, 1, 2], "fix": 3, "flatten": 3, "float": 3, "fly": 0, "fmr": [5, 8, 9], "focu": 2, "folder": 5, "follow": [0, 5, 8, 9], "form": [0, 3, 8], "format": [3, 8], "former": [0, 3], "formul": 0, "found": [0, 1, 3], "fractal": 1, "free": 8, "from": [0, 1, 2, 3, 5, 7, 8, 10], "frontier": [6, 7, 10], "full": [0, 3], "function": 3, "further": 5, "futur": [7, 10], "g": [1, 2, 7, 10], "gener": [0, 1, 2, 3, 8], "geometr": 3, "get": [0, 1, 2, 3, 5, 7, 10], "get_param": 3, "gili": [7, 10], "github": [5, 7, 9, 10], "give": [1, 2, 5, 8], "given": [0, 2, 3], "global": 3, "good": 0, "goodwil": 8, "govern": 8, "grant": [7, 8, 10], "graph": [1, 3, 7, 10], "graph_attr": 3, "graphviz": [7, 9, 10], "greatli": 2, "grossli": 8, "gt": [1, 2], "guarante": 0, "guid": 5, "ha": [0, 3, 5, 7, 8, 10], "hand": 2, "hard": 1, "harmless": 8, "have": [0, 1, 2, 3, 5, 7, 8, 10], "head": [0, 1, 2], "heart": [7, 10], "held": 3, "helmut": [7, 10], "help": 5, "henc": 3, "here": [0, 1, 7, 10], "herebi": 8, "herein": 8, "high": 3, "higher": [0, 2, 3, 7, 10], "highest": 3, "highli": [0, 2], "hold": 8, "home": 7, "how": [0, 8], "howev": [0, 1, 2, 3, 8], "html": 5, "htmlcov": 5, "http": [7, 8, 9, 10], "huge": 0, "hyperparamet": 0, "i": [0, 1, 2, 3, 7, 8, 10], "id": 1, "idea": 0, "identif": 8, "identifi": 8, "ii": 8, "iii": 8, "iloc": [0, 2], "implement": [0, 3], "impli": 8, "implicitli": 2, "import": [0, 1, 2, 3, 5, 7, 8, 10], "impos": 3, "improv": [2, 8], "inabl": 8, "inc": [8, 9], "incident": 8, "includ": [0, 2, 3, 7, 8, 10], "inclus": 8, "incorpor": 8, "incub": [7, 10], "incur": 8, "inde": [0, 1], "indemn": 8, "indemnifi": 8, "independ": 3, "index": [3, 5, 7], "indic": [1, 3, 8], "indirect": 8, "individu": 8, "infer": [2, 3], "inform": [3, 8], "infring": 8, "initi": [3, 4], "input": [3, 6, 7, 10], "insid": [0, 2], "inspect": [0, 1, 2], "instal": [5, 9], "instanc": 3, "instanti": [0, 1, 2, 3], "instead": [0, 2, 3, 5], "institut": 8, "instruct": [0, 7, 10], "int": 3, "integ": [0, 3], "intellig": [7, 10], "intention": 8, "interfac": 8, "intermedi": 3, "intern": [0, 2, 3], "interpret": [1, 2, 7, 10], "intuit": 2, "invest": [5, 7, 10], "io": [7, 9, 10], "ipykernel": [7, 10], "ipynb": 5, "ipython": 9, "irrevoc": 8, "isn": 0, "issn": [7, 10], "issu": [7, 8, 10], "iter": [2, 3], "its": [7, 8, 10], "j": [7, 10], "januari": 8, "job": [0, 3], "john": [7, 10], "journal": [7, 10], "june": 7, "jupyt": [3, 7, 9, 10], "just": [0, 3], "k": [0, 7, 10], "kad\u0131o\u011flu": [7, 10], "katzgrab": [7, 10], "kbinsdiscret": 1, "keep": 3, "kei": [1, 3], "kernel": [5, 7, 10], "kind": 8, "know": [0, 5], "knowledg": [7, 10], "kyle": [7, 10], "lab": [7, 9, 10], "label": [0, 1, 2, 3, 7, 10], "languag": 8, "larg": [0, 3], "larger": 0, "latter": 3, "law": 8, "lawsuit": 8, "leaf": [1, 7, 10], "learn": [1, 7, 9, 10], "learner": 2, "least": [3, 8], "leav": [0, 1], "legal": 8, "legend": 0, "legibl": 1, "len": [0, 1], "length": 2, "leq": 0, "let": [0, 2], "level": [0, 3], "liabil": 8, "liabl": 8, "librari": [5, 7, 10], "licens": 9, "licensor": 8, "like": [0, 2, 3, 5], "limit": 8, "line": [0, 2], "linearli": 0, "link": 8, "list": [0, 3, 8], "liter": [0, 1, 7, 10], "litig": 8, "ll": [0, 1, 2, 5], "llc": [5, 8, 9], "load": [1, 2], "load_breast_canc": [0, 1, 2], "load_iri": 2, "local": [3, 5, 7, 10], "locat": [0, 1], "log": 3, "logger": 3, "logical_or": 0, "longest": [1, 7, 10], "look": 0, "loop": 3, "loss": 8, "low": 3, "lower": 2, "lt": [1, 2], "m": [0, 5, 7, 10], "machin": [0, 7, 10], "made": [5, 7, 8, 10], "mai": 8, "mail": 8, "maintain": 1, "make": [0, 2, 3, 6, 7, 8, 10], "make5040086": [7, 10], "make_multilabel_classif": 2, "make_pipelin": 0, "malfunct": 8, "manag": 8, "map": 3, "mark": [3, 8], "martin": [7, 10], "match": [0, 1], "matplotlib": [0, 9], "max_complex": [0, 3, 7, 10], "max_depth": [3, 7, 10], "max_sampl": [0, 3, 7, 10], "maximum": [0, 3, 7, 10], "mdpi": [7, 10], "mean": [0, 1, 2, 8], "mean_complex": 0, "mechan": 8, "media": 8, "medium": 8, "meet": 8, "memori": 1, "merchant": 8, "mere": 8, "messag": 3, "meta": 2, "method": [0, 1, 3], "metric": [0, 1, 2, 3, 7, 10], "might": [0, 5], "minut": 0, "mitig": 0, "ml": [7, 10], "model": [0, 3, 7, 10], "model_select": 0, "modif": 8, "modifi": 8, "modul": 7, "more": [0, 1, 2, 3, 7, 8, 10], "most": [0, 1, 2, 3], "move": 3, "mtrand": 3, "much": [0, 2], "multi": [7, 10], "multiclass": 6, "multiclass_rule_classifi": 2, "multilabel": 6, "multilabel_rule_classifi": 2, "multioutput": 2, "multioutputclassifi": 2, "multipl": [0, 2, 3], "multiprocess": 3, "must": [0, 1, 3, 5, 7, 8, 10], "n": 0, "n_bin": [0, 1, 2], "n_class": 2, "n_estim": 2, "n_featur": 2, "n_job": 0, "n_sampl": 2, "n_split": 0, "name": [1, 2, 3, 7, 8, 10], "nativ": [3, 7, 10], "nbmake": 5, "ndarrai": 3, "necessarili": 8, "need": [1, 2, 5], "negat": [0, 3], "neglig": 8, "nest": 3, "networkx": [1, 3, 7, 9, 10], "new": [0, 3, 5], "next": 0, "node": [0, 1], "node_attr": 3, "non": 8, "none": 3, "normal": 8, "note": [0, 1, 2, 3, 5, 7, 10], "notebook": [0, 3, 5, 7, 10], "noth": 8, "notic": [7, 8], "notwithstand": 8, "now": [0, 1, 2], "np": [0, 2, 3, 7, 10], "num_children": 1, "num_iter": [0, 3], "num_job": [0, 3, 7, 10], "num_start": [0, 3, 7, 10], "number": [1, 2, 3, 6, 7, 10], "numpi": [0, 2, 3, 7, 9, 10], "nx": 3, "o": 0, "object": [1, 3, 8], "oblig": 8, "observ": 0, "obtain": [0, 2, 8], "off": [0, 3], "offer": 8, "often": 0, "omit": 5, "on_iter": 3, "on_start": 3, "onc": [0, 1], "one": [0, 1, 2, 3, 7, 8, 10], "onehot": [0, 1, 2], "onevsoneclassifi": 2, "onevsrestclassifi": 2, "onli": [0, 1, 2, 3, 5, 8], "opensourc": [5, 7, 10], "oper": [1, 6, 7, 10], "optim": [3, 6, 7, 10], "option": [0, 1, 3], "order": [0, 2, 3, 7, 10], "org": [8, 9], "origin": 8, "other": [1, 2, 5, 8], "otherwis": [3, 8], "our": [0, 2, 3, 5], "out": [0, 2, 8], "output": [1, 2, 3, 5], "outputcodeclassifi": 2, "outstand": 8, "over": [0, 3], "overfit": [0, 2], "overwrit": 5, "own": [7, 8], "owner": 8, "ownership": 8, "packag": 9, "page": [7, 8, 10], "panda": [0, 1, 2, 9], "parallel": [6, 7, 10], "param": 3, "paramet": [0, 3], "parameter": 0, "parametrizedoper": [0, 3], "pareto": [6, 7, 10], "part": [3, 5, 6, 8, 9], "parti": 8, "partial": [0, 7, 10], "particular": [0, 8], "pass": [0, 1, 3], "patch": 1, "patent": 8, "path": [1, 3, 7, 10], "pattern": 0, "pd": 2, "pedagog": 1, "percent": 8, "perform": [0, 2, 8], "perimet": [1, 2], "permiss": 8, "perpetu": 8, "pertain": 8, "petal": 2, "pictur": 0, "pip": [5, 7, 10], "pipelin": [0, 3, 5], "place": 8, "pleas": [5, 7, 10], "plot": [0, 1, 3, 7, 10], "plt": 0, "point": [1, 2, 5], "popul": [0, 3], "portion": [8, 9], "possibl": [1, 3, 7, 8, 10], "possibli": 3, "post": 3, "postprocess": 3, "power": 8, "pr": 5, "pre": 0, "predict": [1, 2, 3, 7, 10], "prefer": [3, 8], "prepar": 8, "present": 0, "previous": [0, 2], "price": 2, "print": [0, 1, 2, 7, 8, 10], "probe": 0, "problem": 0, "process": 3, "product": [3, 8, 9], "programmat": 1, "project": 5, "promin": 8, "propos": 3, "provid": [0, 2, 3, 7, 8, 10], "psf": 9, "public": [4, 7, 10], "publicli": 8, "purpos": [3, 8], "py": [1, 5], "pydata": 9, "pygraphviz": 9, "pypi": [7, 10], "pyplot": 0, "pytest": 5, "python": [7, 10], "python3": [7, 10], "qualiti": [0, 2], "quantifi": 0, "quantil": [0, 1, 2], "quantum": [7, 9, 10], "question": [5, 7, 10], "quick": 1, "r": [0, 5, 7, 10], "radiu": [1, 2], "rais": 0, "random": [3, 7, 10], "random_st": [0, 1, 2, 3, 7, 10], "randomst": 3, "rang": 0, "rather": [0, 2], "re": 5, "read": [5, 7, 10], "readabl": 8, "reason": [0, 1, 8], "recalcul": 1, "receiv": [7, 8, 10], "recipi": 8, "recommend": [5, 7, 8, 10], "recurs": 3, "redistribut": 8, "reduc": 3, "reduct": 0, "refer": 0, "regard": 8, "regular": [0, 2, 3], "releas": [4, 7, 10], "reli": 9, "remain": 8, "replac": [0, 1, 3, 8], "repo": [7, 10], "report": [1, 5, 7, 10], "repositori": [7, 10], "repres": [0, 3, 8], "represent": [1, 3, 7, 10], "reproduc": [1, 3, 8], "reproduct": 8, "request": [7, 10], "requir": [3, 5, 8], "requirements_dev": 5, "requirements_plot": [7, 10], "research": [7, 10], "respect": [0, 3], "respons": 8, "rest": [0, 3], "result": [0, 1, 2, 3, 8], "retain": 8, "return": [0, 1, 3], "return_estim": 0, "return_train_scor": 0, "return_x_i": [0, 1, 2], "revis": 8, "right": 8, "rigid": [7, 10], "risk": 8, "rng": [7, 10], "root": [1, 3, 7, 10], "rosenberg": [7, 10], "row": [1, 3], "royalti": 8, "rule": [2, 6, 7, 10], "rule_classifi": [0, 1, 2, 3, 7, 10], "ruleclassifi": [0, 1, 2, 3, 7, 10], "ruleclassifier__max_complex": 0, "rules_": [0, 3], "run": [0, 3, 7, 10], "runtim": 0, "sai": 2, "salton": [7, 10], "same": [0, 1, 2, 3, 8], "samm": 2, "sampl": [0, 2, 3], "sample_weight": 3, "save": [3, 5], "scale": 0, "schedul": 3, "scheme": 1, "schuetz": [7, 10], "scikit": 9, "score": [0, 1, 2, 3, 7, 10], "scores_": [0, 3], "screen": 3, "search": [7, 10], "sec": 0, "section": [0, 8], "see": [0, 1, 3, 5, 7, 8, 10], "seed": [0, 1, 2, 7, 10], "seen": 0, "select": [0, 3], "self": [0, 3], "sell": 8, "sens": 6, "sent": 8, "sepal": 2, "separ": [0, 2, 7, 8, 9, 10], "septemb": 7, "serdar": [7, 10], "servic": [8, 9], "set": [0, 1, 3], "set_config": [0, 1, 2], "set_param": [0, 3], "setup": 5, "sever": 2, "shall": 8, "shape": [1, 2], "share": 8, "shorter": 0, "should": [1, 3, 5, 8], "show": [0, 1, 7, 10], "signific": 0, "significantli": 3, "sima": [7, 10], "similarli": 3, "simpl": [0, 3, 7, 10], "simplest": 1, "simpli": 3, "simplifi": 3, "simul": 3, "simultan": 3, "sinc": [0, 2, 3], "singl": [0, 2, 3], "singleton": 3, "size": [7, 10], "sklearn": [0, 1, 2, 3, 7, 10], "slow": 3, "small": [0, 2], "smaller": [2, 3], "smooth": [1, 2], "so": [0, 1, 2, 3, 5], "soft": 3, "softwar": 8, "sole": 8, "solut": [0, 3, 7, 9, 10], "solver": 3, "some": [0, 1, 2, 3], "sourc": [3, 5, 8], "space": [0, 7, 10], "special": 8, "specif": [0, 8], "speed": [0, 2], "speedup": 0, "sphinx": 5, "split": 0, "spot": 0, "star": 5, "start": [2, 3, 4, 5, 6], "start_tim": 0, "state": [0, 8], "statement": 8, "static": [7, 10], "std": 0, "step": 0, "still": 3, "stoppag": 8, "str": 3, "strategi": [0, 1, 2], "stratifiedshufflesplit": 0, "strength": 3, "string": 3, "style": 3, "sub": 2, "subclass": 0, "subclassifi": 2, "subject": 8, "sublicens": 8, "submiss": 8, "submit": [7, 8, 10], "subobject": 3, "subrul": [0, 3], "subsequ": 8, "subset": [0, 2], "subtre": [0, 3], "sum": 0, "sum_subrul": 0, "supersed": 8, "support": [2, 3, 8], "sure": [0, 1, 3, 5], "sweet": 0, "switch": [0, 2], "sy": 0, "symmetri": 1, "syntax": 8, "synthet": 2, "system": 8, "t": [0, 8], "take": 0, "target": 0, "task": 2, "techniqu": [7, 10], "temp_high": 3, "temp_low": 3, "temperatur": 3, "templat": 0, "term": [3, 8], "termin": 8, "test": 0, "test_scor": 0, "text": 8, "textur": [1, 2], "than": [2, 3], "thank": 5, "thei": [0, 1, 2, 5], "them": [0, 3], "theori": 8, "therefor": 0, "thereof": [8, 9], "thi": [0, 1, 2, 3, 7, 8, 9, 10], "third": 8, "those": [0, 8], "through": 8, "thu": [7, 10], "tild": 0, "time": [0, 2, 5], "timeout": 5, "titl": [7, 8, 10], "to_dict": [1, 3], "to_graph": [1, 3, 7, 10], "to_str": [1, 2, 3], "toi": [7, 10], "top": 0, "tort": 8, "total": [0, 1, 7, 10], "track": 8, "trade": 8, "trademark": 8, "train": [0, 2, 3, 6, 7, 10], "train_scor": 0, "train_siz": 0, "transfer": 8, "transform": [1, 8], "transform_output": [0, 1, 2], "translat": 8, "tree": [7, 10], "trivial": 0, "true": [0, 1, 2, 3], "try": [0, 2], "tunabl": [7, 10], "turn": 3, "two": [0, 1, 2, 3], "txt": [5, 7, 10], "type": [0, 3, 8], "typic": 3, "u": [0, 5], "undefin": 3, "under": [3, 7, 8, 10], "underli": [1, 2], "unfortun": 1, "union": [0, 8], "uniqu": [1, 2, 3], "unless": [0, 8], "unlik": 0, "unnecessari": 0, "unparameter": 0, "unparametrizedoper": [0, 3], "unregular": 3, "up": [0, 2, 3, 5], "updat": [3, 5, 7, 10], "upper": 0, "upstream": [6, 7], "url": [7, 10], "us": [0, 1, 2, 3, 5, 8], "user": [0, 3, 7, 10], "usual": [2, 3], "util": [0, 1, 2, 7], "v": 3, "valid": [2, 3, 6, 7, 10], "valu": [0, 1, 3], "variabl": [7, 10], "verbal": 8, "veri": [0, 2, 3], "verifi": 0, "version": [1, 5, 8], "via": [2, 3], "view": 0, "virtual": [7, 10], "visual": [7, 10], "volum": [7, 10], "wa": [0, 8], "wai": 2, "wall": 0, "want": 0, "warn": 0, "warranti": 8, "we": [0, 1, 2, 3, 5, 7, 8, 10], "weak": 2, "web": [5, 8, 9], "websit": 9, "weight": [2, 3], "well": [0, 3], "were": 0, "what": [0, 5], "when": [3, 5], "where": [0, 3, 8], "wherev": 8, "whether": [3, 8], "which": [0, 1, 2, 3, 7, 8, 10], "while": [3, 8], "whole": [0, 8], "whom": 8, "width": 2, "wildcard": [0, 3], "wisconsin": 1, "within": [3, 8], "without": [0, 2, 5, 8], "work": [0, 3, 8, 9], "worldwid": 8, "wors": 0, "worst": [1, 2], "write": 8, "written": 8, "www": [7, 8, 10], "x": [0, 1, 2, 3, 7, 10], "x0": 3, "x1": 3, "x2": 3, "x_binar": [0, 1, 2], "xai": [7, 10], "xlabel": 0, "y": [0, 1, 2, 3, 7, 10], "y_pred": [7, 10], "y_predict": [0, 1, 2], "year": [7, 10], "yechao": [7, 10], "ylabel": 0, "you": [0, 5, 7, 8, 10], "your": [7, 8], "zero": [1, 3], "zhihuai": [7, 10], "zhu": [7, 10], "zip": 0}, "titles": ["Advanced Usage Example", "Basic Usage Example", "Upstream Usage Example", "BoolXAI Public API", "BoolXAI CHANGELOG", "Contributing", "Usage Examples", "BoolXAI: Explainable AI using expressive Boolean formulas", "Apache License", "Notices", "BoolXAI: Explainable AI using expressive Boolean formulas"], "titleterms": {"0": 4, "1": 4, "15": 4, "2023": 4, "2024": 4, "3": 4, "ad": 0, "advanc": 0, "ai": [7, 10], "allow": 0, "apach": 8, "api": 3, "archiv": 5, "bag": 0, "basic": 1, "binar": 1, "boolean": [7, 10], "boolxai": [3, 4, 5, 7, 10], "boost": 2, "build": 5, "chang": [0, 5], "changelog": 4, "check": 5, "citat": [7, 10], "class": 0, "classif": 2, "classifi": 1, "coverag": 5, "cross": 0, "custom": 0, "data": [0, 1, 2], "diagram": 0, "document": 5, "exampl": [0, 1, 2, 6, 7, 10], "explain": [7, 10], "express": [7, 10], "formula": [7, 10], "frontier": 0, "i": 5, "indic": 7, "input": [0, 1, 2], "instal": [7, 10], "june": 4, "licens": [7, 8, 10], "liter": 3, "make": [1, 5], "multiclass": 2, "multilabel": 2, "notic": 9, "number": 0, "oper": [0, 3], "optim": 0, "own": 5, "parallel": 0, "pareto": 0, "part": 0, "public": 3, "quick": [7, 10], "repo": 5, "requir": [7, 10], "rule": [0, 1, 3], "run": 5, "sens": 1, "septemb": 4, "start": [0, 7, 10], "support": [7, 10], "tabl": 7, "test": 5, "thi": 5, "train": 1, "trivial": 3, "upstream": 2, "us": [7, 10], "usag": [0, 1, 2, 6, 7, 10], "util": 3, "valid": 0, "your": 5}})