{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "83778a8a",
   "metadata": {},
   "source": [
    "# Advanced Usage Example"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e52dafd",
   "metadata": {},
   "source": [
    "In this example we cover advanced usage of `BoolXAI.RuleClassifier`. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9275b4c7",
   "metadata": {},
   "source": [
    "## Input data\n",
    "\n",
    "We'll start with the same binarized data we used in the Basic Usage Example. In order to speed up the execution, we'll only use a subset of the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "92481d9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-08T22:51:41.201232Z",
     "iopub.status.busy": "2023-05-08T22:51:41.200861Z",
     "iopub.status.idle": "2023-05-08T22:51:42.049953Z",
     "shell.execute_reply": "2023-05-08T22:51:42.048537Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn import set_config\n",
    "\n",
    "set_config(transform_output=\"pandas\")\n",
    "\n",
    "from sklearn import datasets\n",
    "\n",
    "X, y = datasets.load_breast_cancer(return_X_y=True, as_frame=True)\n",
    "\n",
    "# Use a subset of the data to speed up execution.\n",
    "# For higher quality results, comment these lines out.\n",
    "X = X.iloc[:100, :100]\n",
    "y = y.iloc[:100]\n",
    "\n",
    "# Binarize the data\n",
    "from util import BoolXAIKBinsDiscretizer\n",
    "\n",
    "binarizer = BoolXAIKBinsDiscretizer(\n",
    "    n_bins=10, strategy=\"quantile\", encode=\"onehot-dense\"\n",
    ")\n",
    "X_binarized = binarizer.fit_transform(X)\n",
    "\n",
    "X_binarized.head();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16fe1ddc",
   "metadata": {},
   "source": [
    "## Number of starts\n",
    "\n",
    "Each training run consists of `num_starts` starts. The best rule and score for each start can be accessed in the `rules_` and `scores_` attributes (respectively). Next we'll train a classifier and inspect these attributes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "31f9b76c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-08T22:51:42.053567Z",
     "iopub.status.busy": "2023-05-08T22:51:42.053238Z",
     "iopub.status.idle": "2023-05-08T22:51:59.083081Z",
     "shell.execute_reply": "2023-05-08T22:51:59.082198Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score and rule:\n",
      "  score=0.91 rule=Or(230, 50, 271, 222)\n",
      "\n",
      "Best score and rule for each start:\n",
      "  score=0.81 rule=Or(251, 120, 261, 160)\n",
      "  score=0.73 rule=AtMost1(~171, And(257, ~246), ~130)\n",
      "  score=0.74 rule=AtMost1(~50, ~30, 109)\n",
      "  score=0.86 rule=Or(20, 92, 72, 71, 231)\n",
      "  score=0.71 rule=Choose1(~225, And(9, ~37), 195)\n",
      "  score=0.78 rule=Choose1(~205, 28, 206, 256, 64)\n",
      "  score=0.76 rule=AtMost1(~261, ~202, 126)\n",
      "  score=0.71 rule=AtMost1(~101, ~270, 296)\n",
      "  score=0.74 rule=AtLeast2(220, 72, Choose1(138, ~129))\n",
      "  score=0.91 rule=Or(230, 50, 271, 222)\n"
     ]
    }
   ],
   "source": [
    "from boolxai import BoolXAI\n",
    "\n",
    "rule_classifier = BoolXAI.RuleClassifier(random_state=43)\n",
    "rule_classifier.fit(X_binarized, y)\n",
    "\n",
    "print(\"Best score and rule:\")\n",
    "print(f\"  score={rule_classifier.best_score_:.2f} rule={rule_classifier.best_rule_}\\n\")\n",
    "\n",
    "print(\"Best score and rule for each start:\")\n",
    "for score, rule in zip(rule_classifier.scores_, rule_classifier.rules_):\n",
    "    print(f\"  {score=:.2f} {rule=}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1477c163",
   "metadata": {},
   "source": [
    "## Bagging\n",
    "\n",
    "Bagging or \"boostrap aggregation\" is commonly used to select only a partial sample of the dataset to avoid overfitting. It is often applied to single estimators that are then combined to form an ensemble estimator. In our case, our model is already highly regularized, so it's unlikely to overfit the data (unless it's very small/simple). For this reason, combined with the binary inputs, it's unnecessary to feed it huge amounts of data. So, in this case we use bagging not to mitigate overfitting, but rather to boost performance, since evaluation of rules scales linearly with the number of samples.\n",
    "\n",
    "In the rule classifier, one can control the level of bagging using the parameter `max_samples`. It controls the maximum number of samples that will be used in each start, with a default of 2,000. For large datasets, this can make a big difference. Note that the `best_rule_` attribute is populated with the best rule as evaluated over the whole (train) dataset, not only `max_samples`.\n",
    "\n",
    "Let's look at an example: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "18536ca5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-08T22:51:59.087101Z",
     "iopub.status.busy": "2023-05-08T22:51:59.086749Z",
     "iopub.status.idle": "2023-05-08T22:52:15.168716Z",
     "shell.execute_reply": "2023-05-08T22:52:15.167825Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Without bagging:\n",
      "score=0.91 rule=Or(230, 50, 271, 222)\n",
      "\n",
      "CPU times: user 21.3 ms, sys: 5.04 ms, total: 26.3 ms\n",
      "Wall time: 5.84 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "rule_classifier = BoolXAI.RuleClassifier(random_state=43)\n",
    "rule_classifier.fit(X_binarized, y)\n",
    "print(\"Without bagging:\")\n",
    "print(f\"score={rule_classifier.best_score_:.2f} rule={rule_classifier.best_rule_}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e3822987",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-08T22:52:15.172888Z",
     "iopub.status.busy": "2023-05-08T22:52:15.172570Z",
     "iopub.status.idle": "2023-05-08T22:52:18.356418Z",
     "shell.execute_reply": "2023-05-08T22:52:18.355763Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "With bagging:\n",
      "score=0.76 rule=Choose1(244, 226, ~168, 217, 219)\n",
      "\n",
      "CPU times: user 61 ms, sys: 6.37 ms, total: 67.4 ms\n",
      "Wall time: 2.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "rule_classifier = BoolXAI.RuleClassifier(\n",
    "    random_state=43, max_samples=len(X_binarized) // 5\n",
    ")\n",
    "rule_classifier.fit(X_binarized, y)\n",
    "print(\"With bagging:\")\n",
    "print(f\"score={rule_classifier.best_score_:.2f} rule={rule_classifier.best_rule_}\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7de06479",
   "metadata": {},
   "source": [
    "The wall clock time was much shorter, but the result was worse. That's expected for such a small dataset - using 20 samples for each start is not representative. However, for larger datasets we have observed that one can get a significant reduction in run time without a significant change in score. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abacb6ea",
   "metadata": {},
   "source": [
    "## Parallelization\n",
    "\n",
    "Since the runtime for training the classifier can be significant, it's useful to parallelize the computation. The number of parallel jobs (starts, in this case) is controlled by the argument `num_jobs`. We can probe the dependence of the runtime on `num_jobs` with a small experiment (results are dependent on the machine you are using):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ecc62ddc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-08T22:52:18.359819Z",
     "iopub.status.busy": "2023-05-08T22:52:18.359537Z",
     "iopub.status.idle": "2023-05-08T22:53:46.530637Z",
     "shell.execute_reply": "2023-05-08T22:53:46.529861Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num_jobs=24, elapsed_time=7.77 sec, 0.834, AtLeast1(160, 21, 30, 261)\n",
      "num_jobs=12, elapsed_time=6.02 sec, 0.834, AtLeast1(160, 21, 30, 261)\n",
      "num_jobs=8, elapsed_time=4.22 sec, 0.834, AtLeast1(160, 21, 30, 261)\n",
      "num_jobs=4, elapsed_time=6.91 sec, 0.834, AtLeast1(160, 21, 30, 261)\n",
      "num_jobs=2, elapsed_time=11.32 sec, 0.834, AtLeast1(160, 21, 30, 261)\n",
      "num_jobs=1, elapsed_time=18.35 sec, 0.834, AtLeast1(160, 21, 30, 261)\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "seed = 42\n",
    "rule_classifier = BoolXAI.RuleClassifier(\n",
    "    num_starts=24, num_iterations=100, random_state=seed\n",
    ")\n",
    "\n",
    "all_num_jobs = [24, 12, 8, 4, 2, 1]\n",
    "times = []\n",
    "for num_jobs in all_num_jobs:\n",
    "    rule_classifier.num_jobs = num_jobs\n",
    "    start_time = time.time()\n",
    "    rule_classifier.fit(X_binarized, y)\n",
    "    elapsed_time = time.time() - start_time\n",
    "    times.append(elapsed_time)\n",
    "\n",
    "    print(\n",
    "        f\"{num_jobs=}, {elapsed_time=:.2f} sec, {rule_classifier.best_score_:.3}, {rule_classifier.best_rule_}\"\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0d8481b",
   "metadata": {},
   "source": [
    "It is clear that we can get a large speedup by using multiple cores. Note that the rule and score are the same, as expected, since we used the same seed. We see that there is a sweet spot located at the number of cores of the machine we are using (note: using the full data is advisable to get more representative results):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ca9d1aa5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-08T22:53:46.534046Z",
     "iopub.status.busy": "2023-05-08T22:53:46.533417Z",
     "iopub.status.idle": "2023-05-08T22:53:46.719207Z",
     "shell.execute_reply": "2023-05-08T22:53:46.718542Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(4, 2))\n",
    "plt.plot(all_num_jobs, times, \"s--b\")\n",
    "plt.xlabel(\"Number of jobs\")\n",
    "plt.ylabel(\"Time [sec]\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdd973cb",
   "metadata": {},
   "source": [
    "## Cross validation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c1dd241",
   "metadata": {},
   "source": [
    "Cross-validation is often used in order to quantify a model's generalization ability, as well as for hyperparameter optimization. Below we provide an example of running cross-validation for a rule classifier. Here we switch off the internal parallelization over starts, instead parallelizing over the cross-validation splits. Note that the binarization is data-dependent, so we make sure to run it separately on each split. This is done by instantiating an `sklearn`  `Pipeline` consisting of a binarizer and a rule classifier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3ea55b4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-08T22:53:46.721972Z",
     "iopub.status.busy": "2023-05-08T22:53:46.721744Z",
     "iopub.status.idle": "2023-05-08T22:55:25.110908Z",
     "shell.execute_reply": "2023-05-08T22:55:25.110006Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train=0.92+-0.03, Time=36.68+-0.68sec\n",
      "Test=0.80+-0.08\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_validate, StratifiedShuffleSplit\n",
    "from sklearn.pipeline import Pipeline, make_pipeline\n",
    "import numpy as np\n",
    "\n",
    "# Define the pipeline\n",
    "rule_classifier = BoolXAI.RuleClassifier(num_jobs=1, random_state=seed)\n",
    "binarizer = BoolXAIKBinsDiscretizer(\n",
    "    n_bins=10, strategy=\"quantile\", encode=\"onehot-dense\"\n",
    ")\n",
    "pipeline = make_pipeline(binarizer, rule_classifier)\n",
    "\n",
    "# Run cross-validation\n",
    "cv = StratifiedShuffleSplit(n_splits=8, train_size=0.7, random_state=seed)\n",
    "result = cross_validate(\n",
    "    pipeline,\n",
    "    X,\n",
    "    y,\n",
    "    cv=cv,\n",
    "    n_jobs=-1,  # Parallelization here, instead of inside classifier\n",
    "    return_train_score=True,\n",
    "    return_estimator=True,\n",
    "    error_score=\"raise\",\n",
    ")\n",
    "\n",
    "print(\n",
    "    f\"\"\"Train={np.mean(result[\"train_score\"]):.2f}+-{np.std(result[\"train_score\"]):.2f}, Time={np.mean(result[\"fit_time\"]):.2f}+-{np.std(result[\"fit_time\"]):.2f}sec\"\"\"\n",
    ")\n",
    "print(\n",
    "    f\"\"\"Test={np.mean(result[\"test_score\"]):.2f}+-{np.std(result[\"test_score\"]):.2f}\"\"\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61e4db14",
   "metadata": {},
   "source": [
    "## Pareto frontier\n",
    "\n",
    "In most cases there isn't a clear reason to choose a specific `max_complexity` value. In general, we might expect that higher values will provide more expressivity and therefore higher metric scores, but this is not guaranteed. For these reasons, it's often a good idea to find the best rule for multiple `max_complexity` values. Viewing the resulting curve (the Pareto frontier) in the metric-complexity 2D space is instructive. We show an example of how to do this using cross-validation. Warning, this cell might take a few minutes to run!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6d35dd31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-08T22:55:25.115231Z",
     "iopub.status.busy": "2023-05-08T22:55:25.114658Z",
     "iopub.status.idle": "2023-05-08T23:00:26.893350Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max_complexity=3, mean_complexity=3.0, train_score=0.78, test_score=0.71, fit_time=22.41sec\n",
      "max_complexity=6, mean_complexity=5.75, train_score=0.92, test_score=0.80, fit_time=30.02sec\n",
      "max_complexity=10, mean_complexity=8.125, train_score=0.91, test_score=0.80, fit_time=41.83sec\n",
      "max_complexity=15, mean_complexity=9.75, train_score=0.94, test_score=0.79, fit_time=60.93sec\n"
     ]
    }
   ],
   "source": [
    "# Run cross-validation\n",
    "train_scores = []\n",
    "test_scores = []\n",
    "fit_times = []\n",
    "complexities = []\n",
    "\n",
    "for max_complexity in [3, 6, 10, 15]:\n",
    "    # Use the pipeline we instantiated earlier, adjusting max_complexity\n",
    "    pipeline.set_params(ruleclassifier__max_complexity=max_complexity)\n",
    "\n",
    "    result = cross_validate(\n",
    "        pipeline,\n",
    "        X,\n",
    "        y,\n",
    "        cv=cv,\n",
    "        n_jobs=-1,  # Parallelization here, instead of inside classifier\n",
    "        return_train_score=True,\n",
    "        return_estimator=True,\n",
    "        error_score=\"raise\",\n",
    "    )\n",
    "\n",
    "    train_score = np.mean(result[\"train_score\"])\n",
    "    train_scores.append(train_score)\n",
    "\n",
    "    test_score = np.mean(result[\"test_score\"])\n",
    "    test_scores.append(test_score)\n",
    "\n",
    "    fit_time = np.mean(result[\"fit_time\"])\n",
    "    fit_times.append(fit_time)\n",
    "\n",
    "    pipelines = result[\"estimator\"]\n",
    "    mean_complexity = np.mean(\n",
    "        [pipeline[-1].best_rule_.complexity() for pipeline in pipelines]\n",
    "    )\n",
    "    complexities.append(mean_complexity)\n",
    "\n",
    "    print(\n",
    "        f\"{max_complexity=}, {mean_complexity=}, {train_score=:.2f}, {test_score=:.2f}, {fit_time=:.2f}sec\"\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9faf1d3",
   "metadata": {},
   "source": [
    "We can plot the results for easier comparison. Note that we make sure to use the mean of the complexities of the resulting rules on the x axis, and not the respective `max_complexity` (which is an upper bound on the former):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ae2e9197",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.plot(complexities, train_scores, \"s-b\", label=\"Train\")\n",
    "plt.plot(complexities, test_scores, \"o-r\", label=\"Test\")\n",
    "plt.legend()\n",
    "plt.xlabel(\"Complexity\")\n",
    "plt.ylabel(\"Balanced Accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aa3f823",
   "metadata": {},
   "source": [
    "## Rule class diagram\n",
    "\n",
    "For the next two sections, it will be useful to refer to the rule class diagram:\n",
    "\n",
    "![title](rule_class_diagram.png)\n",
    "\n",
    "Note that only the leaves are concrete classes - specific operators, literals, or trivial rules. The rest of the classes are abstract classes. The `Operator` class is not actually implemented, it is only pictured for clearer presentation. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f110b9",
   "metadata": {},
   "source": [
    "## Changing the allowed operators\n",
    "\n",
    "The rule classifier has an argument `operators` which by default includes all the operators provided in `boolxai`. But what if we want to allow only some of the operators? As an example, we might want to only include the unparameterized operators `And` and `Or`. We can do that like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3c26cbd6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from boolxai import Operator\n",
    "\n",
    "rule_classifier = BoolXAI.RuleClassifier(\n",
    "    random_state=43, operators=[Operator.And, Operator.Or]\n",
    ")\n",
    "rule_classifier.fit(X_binarized, y);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7054b17d",
   "metadata": {},
   "source": [
    "We can inspect the best rule seen, as well as the best rule for each start, to make sure that they indeed include only those operators:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ed64809d",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score and rule:\n",
      "  score=0.93 rule=Or(252, 222, 220, 201, 33)\n",
      "\n",
      "Best score and rule for each start:\n",
      "  score=0.71 rule=And(Or(~205, 42), ~109, ~267)\n",
      "  score=0.87 rule=Or(71, 170, 250, 200, 62)\n",
      "  score=0.93 rule=Or(252, 222, 220, 201, 33)\n",
      "  score=0.80 rule=Or(232, 190, 0)\n",
      "  score=0.76 rule=And(~38, Or(230, 23, 41))\n",
      "  score=0.89 rule=Or(220, 222, 272, 221)\n",
      "  score=0.80 rule=And(Or(192, 30, 272), ~9)\n",
      "  score=0.81 rule=Or(251, 130, 260, 261)\n",
      "  score=0.71 rule=Or(And(~126, 1, ~296), 270)\n",
      "  score=0.92 rule=Or(230, 150, 232, 252, 202)\n"
     ]
    }
   ],
   "source": [
    "print(\"Best score and rule:\")\n",
    "print(f\"  score={rule_classifier.best_score_:.2f} rule={rule_classifier.best_rule_}\\n\")\n",
    "\n",
    "print(\"Best score and rule for each start:\")\n",
    "for score, rule in zip(rule_classifier.scores_, rule_classifier.rules_):\n",
    "    print(f\"  {score=:.2f} {rule=}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "983e6765",
   "metadata": {},
   "source": [
    "## Adding custom operators\n",
    "\n",
    "We can even add custom operators. To do so, we follow the template of the included operators in `boolxai.rules.operators`. In particular, we must subclass `UnparametrizedOperator` or `ParametrizedOperator`, and implement the `_evaluate()` method. Let's add the `AllEqual()` operator, which returns `True` only if all included literals are true:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "857dbc62",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import List, Optional, Union\n",
    "\n",
    "from boolxai import Literal\n",
    "from boolxai import UnparametrizedOperator\n",
    "\n",
    "\n",
    "class AllEqual(UnparametrizedOperator):\n",
    "    \"\"\"Returns True if all subrules are equal.\"\"\"\n",
    "\n",
    "    def _evaluate(self, state):\n",
    "        sum_subrules = np.sum(\n",
    "            np.column_stack([subrule.evaluate(state) for subrule in self.subrules]),\n",
    "            axis=1,\n",
    "        )\n",
    "        return np.logical_or(sum_subrules == 0, sum_subrules == len(self.subrules))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb0f2d23",
   "metadata": {},
   "source": [
    "Let's try our new operator to see if it works as expected:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e33eca91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False,  True, False,  True])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.array([[0, 0, 1], [0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 0, 0]])\n",
    "\n",
    "rule = AllEqual([Literal(0, negated=True), Literal(1), Literal(2)])\n",
    "rule.evaluate(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "426c3ea3",
   "metadata": {},
   "source": [
    "Indeed, the result we were expecting! Now we can include this operator class in the training of the rule classifier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1542e443",
   "metadata": {},
   "outputs": [],
   "source": [
    "rule_classifier = BoolXAI.RuleClassifier(\n",
    "    random_state=43, operators=[Operator.And, AllEqual]\n",
    ")\n",
    "rule_classifier.fit(X_binarized, y);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa69b11c",
   "metadata": {},
   "source": [
    "Once again, we can inspect the rules:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bfe57a8c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score and rule:\n",
      "  score=0.85 rule=AllEqual(And(~230, ~21), 232)\n",
      "\n",
      "Best score and rule for each start:\n",
      "  score=0.82 rule=AllEqual(~28, ~205, ~265, ~249, ~206)\n",
      "  score=0.74 rule=AllEqual(72, ~70)\n",
      "  score=0.76 rule=AllEqual(~261, 260)\n",
      "  score=0.85 rule=AllEqual(And(~230, ~21), 232)\n",
      "  score=0.81 rule=AllEqual(~239, ~225, ~178, ~88, ~7)\n",
      "  score=0.78 rule=AllEqual(~62, AllEqual(270, ~61))\n",
      "  score=0.81 rule=AllEqual(And(~230, ~262, ~263), 212)\n",
      "  score=0.83 rule=AllEqual(109, 66, 235, 78, 219)\n",
      "  score=0.80 rule=AllEqual(~274, ~179, ~299, ~138, ~207)\n",
      "  score=0.76 rule=AllEqual(AllEqual(79, ~136), 76, 108)\n"
     ]
    }
   ],
   "source": [
    "print(\"Best score and rule:\")\n",
    "print(f\"  score={rule_classifier.best_score_:.2f} rule={rule_classifier.best_rule_}\\n\")\n",
    "\n",
    "print(\"Best score and rule for each start:\")\n",
    "for score, rule in zip(rule_classifier.scores_, rule_classifier.rules_):\n",
    "    print(f\"  {score=:.2f} {rule=}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbca2b87",
   "metadata": {},
   "source": [
    "We see that the only operators appearing in these rules are `And` and our new operator `AllEqual`, as expected. In this example we added an unparameterized operator. Adding parameterized operators follows the same pattern, provided that the operators have one integer parameter $k$ for which $1 \\leq k \\leq \\tilde{m}$ where $\\tilde{m}$ is the number of subrules of the operator. The value of $k$ is set on the fly by the rule classifier so that it is always in that range. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1794e1d",
   "metadata": {},
   "source": [
    "## Optimizing part of a rule\n",
    "\n",
    "We can also find the best subrule, given a pre-determined base rule. For example, we might already know that two features `f1` and `f2` are well correlated with the target (labels), and we'd like them to definitely be included. Then, we can formulate the problem as optimizing over `Or(f1, f2, *)`, where `*` is the part to be optimized over, which we refer to as the \"wildcard node\". We'll show how to do this step by step below.\n",
    "\n",
    "First, let us construct a rule containing two chosen features. We use two literals that appear in the best solution found at the top of this notebook:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a6b98194",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Or(230, 50)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import balanced_accuracy_score\n",
    "\n",
    "rule = Operator.Or([Literal(230), Literal(50)])\n",
    "rule"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7cefbca",
   "metadata": {},
   "source": [
    "We can check the score that this rule obtains on the dataset directly by using the rule's `evaluate()` method, followed by an application of the metric (in this case balanced accuracy):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "aee3c838",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "score=0.74\n"
     ]
    }
   ],
   "source": [
    "y_predict = rule.evaluate(X_binarized.values)\n",
    "score = balanced_accuracy_score(y, y_predict)\n",
    "print(f\"{score=:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a70f8bc",
   "metadata": {},
   "source": [
    "Now we'd like to add the additional wildcard node to this rule and optimize over that part of the rule. This node will be replaced by the result of the optimization we will run:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d9b2af4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rule before Or(230, 50, *)\n"
     ]
    }
   ],
   "source": [
    "from boolxai import Wildcard\n",
    "\n",
    "base_rule = Operator.Or([Literal(230), Literal(50), Wildcard()])\n",
    "\n",
    "print(\"Rule before\", base_rule)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a318c0ef",
   "metadata": {},
   "source": [
    "We instantiate a new `RuleClassifier` as done previously, but this time we pass in the `base_rule` containing the wildcard node:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9f866430",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rule after Or(230, 50, 222, 291)\n"
     ]
    }
   ],
   "source": [
    "rule_classifier = BoolXAI.RuleClassifier(random_state=43, base_rule=base_rule)\n",
    "rule_classifier.fit(X_binarized, y)\n",
    "print(\"Rule after\", rule_classifier.best_rule_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b2ca59e",
   "metadata": {},
   "source": [
    "Now we can evaluate the new rule, with the optimized subtree:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f941fa9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "score=0.90\n"
     ]
    }
   ],
   "source": [
    "y_predict = rule_classifier.best_rule_.evaluate(X_binarized.values)\n",
    "score = balanced_accuracy_score(y, y_predict)\n",
    "print(f\"{score=:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bc64be1",
   "metadata": {},
   "source": [
    "Or we can just obtain the score from the classifier, and of course they match:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ddc25e5d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score and rule:\n",
      "  score=0.90 rule=Or(230, 50, 222, 291)\n"
     ]
    }
   ],
   "source": [
    "print(\"Best score and rule:\")\n",
    "print(f\"  score={rule_classifier.best_score_:.2f} rule={rule_classifier.best_rule_}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a7119e7",
   "metadata": {},
   "source": [
    "As before, we can also print the rule and score found in each start. In this case, we can verify that all the rules contain our base rule: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b01d2698",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score and rule for each start:\n",
      "  score=0.87 rule=Or(230, 50, 1, 232)\n",
      "  score=0.83 rule=Or(230, 50, Choose1(197, 272))\n",
      "  score=0.85 rule=Or(230, 50, 222)\n",
      "  score=0.85 rule=Or(230, 50, 222)\n",
      "  score=0.85 rule=Or(230, 50, 222)\n",
      "  score=0.85 rule=Or(230, 50, 222)\n",
      "  score=0.86 rule=Or(230, 50, AtMost1(~142, ~272))\n",
      "  score=0.88 rule=Or(230, 50, 171, 62)\n",
      "  score=0.85 rule=Or(230, 50, 222)\n",
      "  score=0.90 rule=Or(230, 50, 222, 291)\n"
     ]
    }
   ],
   "source": [
    "print(\"Best score and rule for each start:\")\n",
    "for score, rule in zip(rule_classifier.scores_, rule_classifier.rules_):\n",
    "    print(f\"  {score=:.2f} {rule=}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "boolxai_test",
   "language": "python",
   "name": "boolxai_test"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
